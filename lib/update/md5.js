"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const context_1 = require("./context");
const config_1 = require("./config");
const timestamp = require('time-stamp');
const path_1 = require("path");
const md5_file_1 = require("md5-file");
const readDir = require("readdir");
class Md5 {
    static calculate() {
        const context = new context_1.default();
        const files = readDir.readSync(context.wwwFolderPath, ['**.js'], readDir.ABSOLUTE_PATHS);
        const results = new Array();
        files.forEach(file => {
            results.push(this.hashFile(file, context));
        });
        fs_extra_1.writeJsonSync(context.md5FilePath, results, { spaces: 2 });
        fs_extra_1.writeJsonSync(context.configFilePath, this.prepareConfig(context), { spaces: 2 });
    }
    static prepareConfig(context) {
        let config = new config_1.default();
        try {
            config = JSON.parse(fs_extra_1.readFileSync(context.defaultConfigFilePath, 'utf8'));
            config.release = process.env.VERSION || this.calculateTimestamp();
        }
        catch (e) {
            config.autogenerated = true;
            config.release = this.calculateTimestamp();
        }
        return config;
    }
    static calculateTimestamp() {
        return timestamp('YYYY.MM.DD.HH.mm.ss');
    }
    static hashFile(file, context) {
        const md5 = md5_file_1.sync(file);
        const path = path_1.relative(context.wwwFolderPath, file).replace(new RegExp('\\\\', 'g'), '/');
        const m5 = new Md5();
        m5.md5 = md5;
        m5.path = path;
        return m5;
    }
}
exports.default = Md5;
