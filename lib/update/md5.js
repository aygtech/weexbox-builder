"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const context_1 = require("./context");
const config_1 = require("./config");
const time_stamp_1 = require("time-stamp");
const hidefile_1 = require("hidefile");
const path_1 = require("path");
const md5_file_1 = require("md5-file");
class Md5 {
    static calculate() {
        return __awaiter(this, void 0, void 0, function* () {
            const context = new context_1.default();
            const files = fs_extra_1.readdirSync(context.wwwFolderPath);
            console.log(JSON.stringify(files));
            const results = new Array();
            files.forEach(file => {
                if (!hidefile_1.default.isHiddenSync(file)) {
                    results.push(this.hashFile(file, context));
                }
            });
            const json = JSON.stringify(results, null, 2);
            fs_extra_1.writeFileSync(context.configFilePath, json);
            return new Promise(resolve => {
                resolve();
            });
        });
    }
    static prepareConfig(context) {
        let config = new config_1.default();
        try {
            config = JSON.parse(fs_extra_1.readFileSync(context.defaultConfigFilePath, 'utf8'));
            config.release = process.env.VERSION || this.calculateTimestamp();
        }
        catch (e) {
            config.autogenerated = true;
            config.release = this.calculateTimestamp();
        }
        return config;
    }
    static calculateTimestamp() {
        return time_stamp_1.default('YYYY.MM.DD.HH.mm.ss');
    }
    static hashFile(file, context) {
        const md5 = md5_file_1.sync(file);
        const path = path_1.relative(context.wwwFolderPath, file).replace(new RegExp('\\\\', 'g'), '/');
        const m5 = new Md5();
        m5.md5 = md5;
        m5.path = path;
        return m5;
    }
}
exports.default = Md5;
